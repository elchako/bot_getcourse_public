import json
import re
import time

import telebot
from telebot.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardMarkup)

import export_getcource_users_db
import in_out_db
from data import texts
import google_doc_api

with open('data/settings.json') as j:
    settings = json.load(j)
TOKEN = settings['token']
key_api = settings['key_api_getcource']
ID_GROUP_MENTORS = settings['id_group_mentors']
ID_GROUP_TECHSUPPORT = settings['id_group_techsupport']

telebot.apihelper.SESSION_TIME_TO_LIVE = 5 * 60
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
bot.delete_webhook()

dic_key_func = {
    'üü¢ –í–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': 'intro_info',
    '‚ûï –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'start_test',
    'üó® –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å': 'question',
    'üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è': 'reminder',
    'üïê –£—Ä–æ–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é': 'questioning2',
    '‚≠ï –ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'questioning'
}


def keyboard_menu():
    '''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–∑ –∫–ª—é—á–µ–π –≤ dic_key_func'''
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*list(dic_key_func.keys()))
    return keyboard


def step_keyboard(text_list: list, row_width=2):
    '''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è next_step, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª–µ texts'''
    keyboard = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=row_width)
    keyboard.add(*text_list)
    return keyboard

# def step_keyboard(text_list):
#     keyboard = InlineKeyboardMarkup(row_width=2)
#     for num, text in enumerate(text_list):
#         btn = InlineKeyboardButton(text=text, callback_data = f'{text}:{num}')
#         keyboard.add(btn)
#     return keyboard


def url_buttons(array: dict):
    '''–ë–µ—Ä–µ–º —Å–ª–æ–≤–∞—Ä—å array –∏ —Å–æ–∑–¥–∞–µ–º URL –∫–Ω–æ–ø–∫–∏'''
    markup = InlineKeyboardMarkup()
    for text_button, url in array.items():
        button = InlineKeyboardButton(text_button, url=url)
        markup.add(button)
    return markup


def validate_step_message(message, list_validate):
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –≤ next_step'''
    if message.text in list_validate:
        print(message.text)
        return True


def validate_main_menu(message):
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é'''
    if message.text in dic_key_func.keys():
        return True


def send_start(message, text='–í–µ—Ä–Ω–µ–º—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'):
    '''–í–æ–∑–≤—Ä–∞—Ç –≤ *–≥–ª–∞–≤–Ω–æ–µ* –º–µ–Ω—é, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ *–º–µ–Ω—é*'''
    telegram_id = message.from_user.id
    bot.send_message(telegram_id, text, reply_markup=keyboard_menu())


@bot.message_handler(commands=['start'])
def start(message):
    '''–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞'''
    telegram_id = message.from_user.id
    if not in_out_db.check_user_db(telegram_id):
        keyboard = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        btn_phone = KeyboardButton(text='üìû –ü–µ—Ä–µ–¥–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
        keyboard.row(btn_phone)
        bot.reply_to(message, texts.hello, reply_markup=keyboard)
    else:
        bot.send_message(telegram_id, 
                         f'''<b>–ú—ã —É–∑–Ω–∞–ª–∏ —Ç–µ–±—è, {message.from_user.first_name}</b> üôÇ''',
                         reply_markup=keyboard_menu())


@bot.message_handler(content_types=['contact'])
def get_phone(message):
    '''–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥. –ó–∞–ø—Ä–æ—Å–∏–º –∏ –ø–æ–ª—É—á–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–≤–µ—Ä–∏–º –µ–≥–æ –≤ –ë–î'''
    if message.contact is not None:
        telegram_id = message.contact.user_id
        phone = message.contact.phone_number.replace('+', '')
        if in_out_db.new_users_phone(telegram_id, phone):
            bot.send_message(telegram_id, '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç telegram —Å–≤—è–∑–∞–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º getcource')
            questioning(message)
        elif not in_out_db.new_users_phone(telegram_id, phone):
            bot.send_message(telegram_id, '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.... ')
            if export_getcource_users_db.update_users_info_db(False, telegram_id, phone):
                # –∏–∑–≤–ª–µ—á–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ API –∏ –¥–æ–±–∞–≤–∏–º –≤ –ë–î
                msg = bot.send_message(telegram_id, '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç telegram —Å–≤—è–∑–∞–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º getcource')
                bot.register_next_step_handler(msg, questioning)
            else:
                bot.send_message(telegram_id, f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–∞—Å –Ω–∞–π—Ç–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è —á—Ç–æ –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —Ç–µ–ª–µ–≥—Ä–∞–º —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –∫ getcource https://courses.elenavolkova.school/user/my/profile. ')


@bot.message_handler(regexp='–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
def questioning(message):
    telegram_id = message.from_user.id
    text = message.text
    if '–ù–∞–∑–∞–¥' in text or text == '/start':
        send_start(message)
        return
    msg = bot.send_message(telegram_id, texts.choose_level, reply_markup=step_keyboard(texts.levels))
    bot.register_next_step_handler(msg, level_step)


def level_step(message):
    telegram_id = message.from_user.id
    text = message.text
    if '–ù–∞–∑–∞–¥' in text or text == '/start':
        send_start(message)
        return
    if not validate_step_message(message, texts.levels):
        send_start(message, f'–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {text}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞')
        return
    bot.send_message(telegram_id, f'–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {text}')
    msg = bot.send_message(telegram_id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=step_keyboard(texts.age))
    bot.register_next_step_handler(msg, age_step)


def age_step(message):
    telegram_id = message.from_user.id
    text = message.text
    if '–ù–∞–∑–∞–¥' in text:
        msg = bot.send_message(telegram_id, texts.choose_level, reply_markup=step_keyboard(texts.levels))
        bot.register_next_step_handler(msg, level_step)
    elif text == '/start':
        send_start(message)
        return
    elif not validate_step_message(message, texts.age):
        send_start(message, f'–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {text}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞')
        return
    else:
        bot.send_message(telegram_id, f'–í—ã–±—Ä–∞–Ω –≤–æ–∑—Ä–∞—Å—Ç: {text}')
        msg = bot.send_message(telegram_id, '–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç?', reply_markup=step_keyboard(texts.problems))
        bot.register_next_step_handler(msg, problems_step)


def problems_step(message):
    telegram_id = message.from_user.id
    text = message.text
    if '–ù–∞–∑–∞–¥' in text:
        msg = bot.send_message(telegram_id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=step_keyboard(texts.age))
        bot.register_next_step_handler(msg, age_step)
    elif text == '/start':
        send_start(message)
        return
    elif not validate_step_message(message, texts.problems):
        send_start(message, f'–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {text}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞')
        return
    else:
        bot.send_message(telegram_id, f'–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {text}')
        msg = bot.send_message(telegram_id, '–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã?', reply_markup=step_keyboard(texts.days_interval))
        bot.register_next_step_handler(msg, days_step)


def days_step(message):
    telegram_id = message.from_user.id
    text = message.text
    if '–ù–∞–∑–∞–¥' in text:
        msg = bot.send_message(telegram_id, '–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç?', reply_markup=step_keyboard(texts.problems))
        bot.register_next_step_handler(msg, problems_step)
    elif text == '/start':
        send_start(message)
        return
    elif not validate_step_message(message, texts.days_interval):
        send_start(message, f'–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {text}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞')
        return
    else:
        bot.send_message(telegram_id, f'–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π: {text}')
        msg = bot.send_message(telegram_id, '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å?', reply_markup=step_keyboard(texts.time_inteval))
        bot.register_next_step_handler(msg, time_step)


def time_step(message):
    telegram_id = message.from_user.id
    text = message.text
    if '–ù–∞–∑–∞–¥' in text:
        msg = bot.send_message(telegram_id, '–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã?', reply_markup=step_keyboard(texts.days_interval))
        bot.register_next_step_handler(msg, days_step)
    elif text == '/start':
        send_start(message)
        return
    elif not validate_step_message(message, texts.time_inteval):
        send_start(message, f'–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {text}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞')
        return
    else:
        bot.send_message(telegram_id, f'–í—ã–±—Ä–∞–Ω–æ –≤—Ä–µ–º—è: {text}')
        msg = bot.send_message(telegram_id, texts.reminder_lesson,
                               reply_markup=step_keyboard(texts.cancel_reminder))
        bot.register_next_step_handler(msg, write_time_reminder, True)


def write_time_reminder(message, *step_triger):
    telegram_id = message.from_user.id
    text = message.text
    if '–ù–∞–∑–∞–¥' in text and step_triger:
        msg = bot.send_message(telegram_id, '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å?', reply_markup=step_keyboard(texts.time_inteval))
        bot.register_next_step_handler(msg, time_step)
    elif text == '/start' or '–ù–∞–∑–∞–¥' in text:
        send_start(message)
        return
    elif text == texts.cancel_reminder[0]:
        in_out_db.update_one_variable_db(telegram_id, 'reminder_start_lessons', '')
        send_start(message,
                   'üü£ –ú—ã –Ω–µ –±—É–¥–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–≤—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–∞–≤ –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>')
        return
    else:
        if not re.match(r'^(2[0-3]|[01]?[0-9]):([0-5]?[0-9])$', text):
            send_start(message, 'üî¥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX:XX –ù–∞–ø—Ä–∏–º–µ—Ä 10:05 –∏–ª–∏ 7:40')
            return
        elif in_out_db.update_one_variable_db(telegram_id, 'reminder_start_lessons', text):
            bot.send_message(telegram_id,
                             f'''üü¢ –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö –≤ <b>{text}</b>. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–∞–≤ –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>''')
            msg = bot.send_message(telegram_id, '''–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å''',
                             reply_markup=step_keyboard([str(x) for x in range(-10, 11)], 5))
            if step_triger:
                bot.register_next_step_handler(msg, time_utc, True)
            else:
                bot.register_next_step_handler(msg, time_utc)
        else:
            bot.send_message(telegram_id, f'üî¥ –ù–µ —Å–º–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {text}, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–∏–º –ø—Ä–æ–±–ª–µ–º—É')


def time_utc(message, *step_triger):
    '''–ó–∞–ø—Ä–æ—Å–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –¥–æ–±–∞–≤–∏–º –≤ –ë–î'''
    telegram_id = message.from_user.id
    text = message.text
    send_start(message, f'üïí –í—ã–±—Ä–∞–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{text}</b>')
    in_out_db.update_one_variable_db(telegram_id, 'utc', text)
    if step_triger:
        block_intro(message)


@bot.message_handler(regexp='–í–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', content_types=['text'])
def block_intro(message):
    '''–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –í–≤–æ–¥–Ω—ã–π –±–ª–æ–∫ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'''
    telegram_id = message.from_user.id
    bot.send_message(telegram_id,
                     '–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å 5 –±–∞–∑–æ–≤—ã–º–∏ –ª–µ–∫—Ü–∏—è–º–∏ –æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è',
                     reply_markup=url_buttons(texts.base_lections))
    time.sleep(2)
    bot.send_message(telegram_id,
                     '–ü–æ –∫–Ω–æ–ø–∫–µ <b>–í–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ 5 –≤–≤–æ–¥–Ω—ã—Ö –ª–µ–∫—Ü–∏–π')


@bot.message_handler(regexp='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
def ask_question(message):
    '''–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º'''
    telegram_id = message.from_user.id
    msg = bot.send_message(telegram_id,
                           '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∫ —Å–æ–æ–±—â–µ–Ω–∏—é –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª—é–±–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥)), –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ')
    bot.register_next_step_handler(msg, forward_question)


def forward_question(message):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º'''
    text = message.text
    telegram_id = message.from_user.id

    if text in list(dic_key_func.keys()) or text == '/start':
        print(list(dic_key_func.keys()))
        return

    bot.forward_message(ID_GROUP_TECHSUPPORT, telegram_id, message.id)
    bot.send_message(telegram_id, 'üåÄ –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–æ–ø—Ä–æ—Å, –º—ã –≤–∞–º —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º....')


def match_chat_id(message):
    '''–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑ –∫–∞–∫–æ–≥–æ —á–∞—Ç–∞ —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'''
    if message.chat.id == ID_GROUP_TECHSUPPORT:
        return True


@bot.message_handler(func=match_chat_id, content_types=['audio', 'photo', 'voice', 'video', 'document', 'text', 'location', 'contact', 'sticker'])
def answer_mentor(message):
    '''–û—Ç–≤–µ—Ç –º–µ–Ω—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'''
    if message.chat.id == ID_GROUP_TECHSUPPORT and message.reply_to_message:
        bot.forward_message(message.json['reply_to_message']['forward_from']['id'], ID_GROUP_TECHSUPPORT, message.id)
        # bot.send_message(message.json['reply_to_message']['forward_from']['id'], f'–û—Ç–≤–µ—Ç –º–µ–Ω—Ç–æ—Ä–∞: {message.text}')


@bot.message_handler(regexp='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', content_types=['text'])
def main_write_time_reminder(message):
    '''–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'''
    telegram_id = message.from_user.id
    time_remind = in_out_db.read_one_variable_db(telegram_id, 'reminder_start_lessons')
    if time_remind not in ('', None):
        bot.send_message(telegram_id, f'–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π {time_remind}')
    if time_remind in ('', None):
        bot.send_message(telegram_id, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–Ω—è—Ç–∏—è—Ö –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    msg = bot.send_message(telegram_id, texts.reminder_lesson_main_menu,
                           reply_markup=step_keyboard(texts.cancel_reminder))
    bot.register_next_step_handler(msg, write_time_reminder)


@bot.message_handler(regexp='–£—Ä–æ–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é')
def week_lessons(message):
    '''–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ü–æ–¥–±–æ—Ä–∫–∞ —É—Ä–æ–∫–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ gogole —Ç–∞–±–ª–∏—Ü—ã, –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–∫–µ:
    ['–Ω–µ–¥–µ–ª—è 1', {'—É—Ä–æ–∫ 1': '–º–æ–± 1', '—É—Ä–æ–∫ 2': '–∑—Å—Ç 1 - –¥—ã—Ö–∞–Ω–∏–µ', '—É—Ä–æ–∫ 3': '—Å—Ç–∞–± 1', '—É—Ä–æ–∫ 4': '–º–æ–± 2'}]'''
    telegram_id = message.from_user.id
    level = in_out_db.read_one_variable_db(telegram_id, 'level')
    week = in_out_db.read_one_variable_db(telegram_id, 'week')
    lessons = google_doc_api.get_lessons_week(level, f'–Ω–µ–¥–µ–ª—è {week}')
    if lessons:
        bot.send_message(telegram_id, f'<b>{lessons[0]}</b>',
                         reply_markup=url_buttons(lessons[1]))


@bot.message_handler(regexp='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
def start_testing(message):
    '''–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –æ—Ç –º–µ–Ω—Ç–æ—Ä–∞'''
    telegram_id = message.from_user.id
    msg = bot.send_message(telegram_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≤–∞—à–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏',
                           reply_markup=step_keyboard(['C–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ', 'C –ø–æ–º–æ—â—å—é –º–µ–Ω—Ç–æ—Ä–∞ —à–∫–æ–ª—ã']))
    bot.register_next_step_handler(msg, step_testing)


def step_testing(message):
    telegram_id = message.from_user.id
    text = message.text
    if text == 'C–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ':
        msg = bot.send_message(telegram_id, texts.levels_descriptions,
                           reply_markup=step_keyboard(list(texts.dict_levels.keys())))
        bot.register_next_step_handler(msg, step_testing_self)
    elif text == 'C –ø–æ–º–æ—â—å—é –º–µ–Ω—Ç–æ—Ä–∞ —à–∫–æ–ª—ã':
        img = open('data/pic/testing.png', 'rb')
        bot.send_photo(telegram_id, img)
        msg = bot.send_message(telegram_id, texts.levels_descriptions,
                           reply_markup=step_keyboard(['–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', '–ù–∞–∑–∞–¥']))
        bot.register_next_step_handler(msg, step_testing_mentor)


def step_testing_self(message):
    telegram_id = message.from_user.id
    text = message.text
    # if not validate_step_message(message, dict(texts.dict_levels.keys())):
    #     send_start(message, f'–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {text}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞')
    #     return
    send_start(message, texts.thanks_choose_level)
    in_out_db.update_one_variable_db(telegram_id, 'level', texts.dict_levels.get(text))
    return


def step_testing_mentor(message):
    telegram_id = message.from_user.id
    text = message.text
    if text in ('/start', '–ù–∞–∑–∞–¥', '–û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'):
        send_start(message, '‚ùå –û—Ç–º–µ–Ω–∞, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
        return
    bot.send_message(telegram_id, '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π', reply_markup=url_buttons(texts.watch_video_test))
    msg = bot.send_message(telegram_id, f'<b>üìΩ –°–Ω–∏–º–∏—Ç–µ —Å–µ–±—è –Ω–∞ –≤–∏–¥–µ–æ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—é–¥–∞ (+ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫–∞–∫ —Å–Ω—è—Ç—å)</b>', reply_markup=step_keyboard(texts.test_video))
    bot.register_next_step_handler(msg, send_video_mentor, 1)


def send_video_mentor(message, count):
    telegram_id = message.from_user.id
    text = message.text
    print('send_video_mentor', count)
    if text in ('–û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', '/start'):
        send_start(message, '‚ùå –û—Ç–º–µ–Ω–∞, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
        return
    if text and '–ù–∞–∑–∞–¥' in text:
        count -= 1
        if count < 1:
            count = 1
        msg = bot.send_message(telegram_id, f'–°–Ω–∏–º–∏—Ç–µ —Å–µ–±—è –Ω–∞ –≤–∏–¥–µ–æ {count} –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—é–¥–∞', reply_markup=step_keyboard(texts.test_video))
        bot.register_next_step_handler(msg, send_video_mentor, count)
    elif message.video:
        count += 1
        bot.forward_message(ID_GROUP_MENTORS, telegram_id, message.id)
        if count == 6:
            send_start(message, texts.end_testing)
            return
        msg = bot.send_message(telegram_id, f'<b>{texts.test_video_step.get(count)}</b>')
        bot.register_next_step_handler(msg, send_video_mentor, count)
    if text == '–ö–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–∏–¥–µ–æ':
        count -= 1
        if count < 1:
            count = 1
        video = open('data/video/add_video.mp4', 'rb')
        bot.send_message(telegram_id, f'–¢—É—Ç –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è Android –∏ IOS, –Ω–∏–∂–µ –≤–∏–¥–µ–æ')
        msg = bot.send_video(telegram_id, video)
        bot.register_next_step_handler(msg, send_video_mentor, count)


# @bot.message_handler(content_types=['text'])
# def echo_main_menu(message):
#     text = message.text
#     print(message)
    # for menu, command in dic_key_func.items():
    #     if menu == text:
    #         print(menu, text)
    # if text == '–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
    #     questioning(message)


if __name__ == '__main__':
    try:
        bot.infinity_polling()
    except:
        pass
